;; --------------------------------------------------
;; Practicalli Clojure CLI Configuration
;;
;; Aliases that extend the features of the Clojure CLI
;; using Community projects as tools and libraries
;; to enhanced the development workflow
;; --------------------------------------------------


;; --------------------------------------------------
;; Top-level keys for Clojure CLI deps.edn

;; :mvn/repositories - Maven & Clojars repositories, examples of other repositories
;; :mvn/local-repo   - example of setting a local repository path
;; :aliases          - tools to enhance a development workflow
;; :paths            - not included in this configuration
;; :deps             - not included in this configuration

;; Keys used within :aliases
;;  resolve-deps aliases (-R) affect dependency resolution, options:
;;    :extra-deps - specifies extra deps to add to :deps
;;    :override-deps - specifies a coordinate to use instead of that in :deps
;;    :default-deps - specifies a coordinate to use for a lib if one isn't found
;;  make-classpath aliases (-C) affect the classpath generation, options:
;;    :extra-paths - vector of additional paths to add to the classpath
;;    :classpath-overrides - map of lib to path that overrides the result of resolving deps
;; ---------------------------------------------------


{;; ---------------------------------------------------
 ;; Library Repositories (maven)

 ;; Specify a local repository for maven - default `$HOME/.m2/repository`
 ;; FreeDesktop.org XDG_CACHE_HOME is the recommended location
 ;; Full path should be used, otherwise directory relative command is used
 ;; :mvn/local-repo "/home/practicalli/.cache/maven/repository"

 ;; `clojure -Spath` will show the current class path which will include the path to the local maven repository for the library dependencies.

 ;; Order in which repositories are consulted is not guaranteed, so only add essential repositories
 ;; Maven Central and Clojars are the canonical repositories for library dependencies
 ;; JCenter is large and fast mirror often accessible behind corporate firewalls

 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}
             "cognitect-dev-tools" {:url "https://dev-tools.cognitect.com/maven/releases/"}

             ;; Clojure snapshots
             ;; "sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}

             ;; Maven Central Google Cloud Storage mirrors
             ;; Americas
             ;; "google-maven-central" {:url "https://maven-central.storage-download.googleapis.com/maven2/"}
             ;; Asia
             ;; "google-maven-central" {:url "https://maven-central-asia.storage-download.googleapis.com/maven2/"}
             ;; Europe
             ;; "google-maven-central" {:url "https://maven-central-eu.storage-download.googleapis.com/maven2/"}

             ;; "clojars-china-mirror" {:url "https://mirrors.tuna.tsinghua.edu.cn/clojars/"}

             ;; Example of local Artifactory repository configuration
             ;; {"business-area" {:url "https://artifacts.internal-server.com:443/artifactory/business-area-maven-local"}

             #_()}

 ;; End of Library Repositories
 ;; ---------------------------------------------------

 ;; ---------------------------------------------------
 ;; User alias definitions

 :aliases
 {;; ---------------------------------------------------
  ;; Development environment

  ;; Include `dev` directory on the class path to auto-load `dev/user.clj` on REPL startup
  ;; http://practicalli.github.io/clojure/clojure-tools/configure-repl-startup.html

  :lib/vanilla
  {:extra-deps {compliment/compliment         {:mvn/version "0.5.3"}
                criterium/criterium           {:mvn/version "0.4.6"}
                nrepl/nrepl       {:mvn/version "1.1.0"}
                cider/cider-nrepl {:mvn/version "0.45.0"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.9.1"}}}

  :middleware/vanilla
  {:extra-deps {compliment/compliment         {:mvn/version "0.5.3"}
                criterium/criterium           {:mvn/version "0.4.6"}
                nrepl/nrepl       {:mvn/version "1.1.0"}
                cider/cider-nrepl {:mvn/version "0.45.0"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.9.1"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware,refactor-nrepl.middleware/wrap-refactor]"]}


  ;; End of Development environment
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Running a REPL

  ;; End of REPL and nREPL connections
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Remote REPL connection

  ;; Connect to the nREPL server of a remote REPL
  ;; clojure -M:repl/remote --host hostname --port 12345
  ;; replace --host and --port values with that of remote nREPL server
  :repl/remote
  {:extra-deps {nrepl/nrepl {:mvn/version "1.1.0"}}
   :main-opts ["-m" "nrepl.cmdline" "--connect"]}


  ;; End of remote REPL connections
  ;; ---------------------------------------------------

  ;; End of: Creating projects from templates
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Searching

  ;; clj-check - search each namespace and report compilation warnings and errors
  ;; https://github.com/athos/clj-check
  ;; clojure -M:search/errors
  :search/errors
  {:extra-deps {athos/clj-check
                {:git/url "https://github.com/athos/clj-check.git"
                 :sha     "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
   :main-opts  ["--main" "clj-check.check"]}

  ;; Carve - search through code for unused vars and remove them
  ;; clojure -M:search/unused-vars --opts '{:paths ["src" "test"]}'
  :search/unused-vars
  {:extra-deps {borkdude/carve
                {:git/url "https://github.com/borkdude/carve"
                 :sha     "e02b65f9de679450176a3fa26c89ffd5600d7eb8"}}
   :main-opts  ["--main" "carve.main"]}

  ;; End of Projects and dependencies
  ;; ---------------------------------------------------


  ;; ---------------------------------------------------
  ;; Formatting tools

  ;; pretty printing with sorted keys and set values
  ;; include as a library when starting a project
  :lib/pprint-sorted
  {:extra-deps {mvxcvi/puget {:mvn/version "1.3.4"}}}

  ;; End of: Formatting tools
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Data Science

  ;; Notebooks for Clojure
  ;; https://github.com/nextjournal/clerk
  ;; Alias can be used as an optional library for projects or REPL workflow
  :lib/clerk
  {:extra-deps {io.github.nextjournal/clerk {:mvn/version "0.15.957"}}}

  ;; End of Data Science
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Clojure Specifications

  ;; Clojure spec test.check (clojure spec included in Clojure 1.9 onwards)
  :lib/spec-test
  {:extra-deps
   {org.clojure/test.check {:mvn/version "1.1.1"}}}

  ;; Clojure spec 2 - under active development
  ;; https://github.com/clojure/spec-alpha2
  ;; latest commit SHA is returned by the command
  ;; git ls-remote https://github.com/clojure/spec-alpha2.git refs/heads/master
  :lib/spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "4cbfa677c4cd66339f18e1c122222c05c69e0d8e"}}}

  ;; End of Clojure Specifications
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Testing Environment / Libraries

  ;; End of Testing frameworks
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Test runners

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner
  ;; clojure -X:test/cognitect
  :test/cognitect
  {:extra-paths ["test"]
   :extra-deps  {io.github.cognitect-labs/test-runner
                 {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
   :main-opts   ["-m" "cognitect.test-runner"]
   :exec-fn cognitect.test-runner.api/test}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -X:test/run
  ;; clojure -X:test/run :fail-fast true
  :test/run
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.87.1366"}}
   :main-opts   ["-m" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:randomize? false
               :fail-fast? true}}

  ;; Kaocha test runner in watch mode
  ;; clojure -X:test/watch
  :test/watch
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.87.1366"}}
   :main-opts   ["-m" "kaocha.runner" "--watch" "--fail-fast" "--skip-meta" ":slow"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:watch? true
               :randomize? false
               :fail-fast? true}}

  ;; https://github.com/lambdaisland/kaocha-cucumbe
  ;; - used for kaocha-runner.el to run Kaocha test runner in Emacs Cider
  :lib/kaocha
  {:extra-deps {lambdaisland/kaocha {:mvn/version "1.87.1366"}}}

  ;; End of Test runners
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Test Coverage tools

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -M:test/coverage
  ;; clojure -X:test/coverage
  :test/cloverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "1.2.4"}}
   :main-opts   ["-m" "cloverage.coverage"
                 "--src-ns-path" "src"
                 "--test-ns-path" "test"]
   :exec-fn     cloverage.coverage/run-project
   :exec-args   {:src-ns-path  ["src"]
                 :test-ns-path ["test"]}}

  ;; End of Test Coverage tools
  ;; ---------------------------------------------------

  :graph/vars
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "9d6f2c1ede8be7ab4508065fe6b7e40e0c099ab6"}}
   :main-opts  ["--main" "thomasa.morpheus.main"]}

  ;; Generate PNG image of dependency graph in directory called `graphs`
  ;; clojure -M:graph/vars-png
  :graph/vars-png
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "9d6f2c1ede8be7ab4508065fe6b7e40e0c099ab6"}}
   :main-opts  ["--main" "thomasa.morpheus.main"
                "-d" "graphs" "-f" "png" "src" "test"]}

  ;; Generate SVG image of dependency graph in directory called `graphs`
  ;; clojure -M:graph/vars-svg
  :graph/vars-svg
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "9d6f2c1ede8be7ab4508065fe6b7e40e0c099ab6"}}
   :main-opts  ["--main" "thomasa.morpheus.main"
                "-d"  "graphs" "-f" "svg" "src" "test"]}

  ;; Visualize connections between library dependencies and project namespaces
  ;; https://github.com/SevereOverfl0w/vizns
  ;; clojure -M:graph/ns-deps
  :graph/ns-deps
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "36fed24e3673f0562fbc53d4c5d932c51fb0ac53"}}
   :main-opts  ["--main" "io.dominic.vizns.core"]}

  ;; Generate single PNG image of library dependencies
  :graph/ns-deps-png
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "36fed24e3673f0562fbc53d4c5d932c51fb0ac53"}}
   :main-opts  ["--main" "io.dominic.vizns.core" "single" "-o" "deps-graph.png" "-f" "png"]}

  ;; GraphViz of project dependencies
  ;; https://github.com/clojure/tools.deps.graph
  ;; clojure -T:graph/deps
  :graph/deps
  {:replace-paths []
   :replace-deps  {org.clojure/tools.deps.graph {:mvn/version "1.1.84"}}
   :ns-default    clojure.tools.deps.graph
   :exec-fn       graph
   :exec-args     {:output "project-dependencies-graph.png"
                   :size   true}}
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Performance testing

  ;; Benchmarking library for Clojure
  ;; https://github.com/hugoduncan/criterium/
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project source code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))
  :performance/benchmark
  {:extra-deps {criterium/criterium {:mvn/version "0.4.6"}}}

  ;; clj-memory-meter
  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as memory-meter])
  ;; - (memory-meter/measure (your-expression))
  :performance/memory-meter
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.2.2"}}
   :jvm-opts   ["-Djdk.attach.allowAttachSelf"]}

  ;; End of Performance testing
  ;; ---------------------------------------------------

  ;; ---------------------------------------------------
  ;; Socket REPL

  ;; Clojure Socket REPL on port 55555:
  ;; clojure -X:repl/socket
  :repl/socket
  {:exec-fn clojure.core.server/start-server
   :exec-args {:name "repl-server"
               :port 55555
               :accept clojure.core.server/repl
               :server-daemon false}}

  ;; Older Socket REPL approaches to review:

  ;; clojure -M:repl/socket-jvm-opts (lesser used approach)
  :repl/socket-jvm-opts
  {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}

  ;; Clojure Socket REPL on an available port, displaying port number (container/cloud environments)
  ;; - specify -r to start a repl
  :repl/socket-zero
  {:jvm-opts  ["-Dclojure.server.repl={:port,0,:accept,clojure.core.server/repl}"]
   :main-opts ["-e" "(.getLocalPort,(get-in,@#'clojure.core.server/servers,[\"repl\",:socket]))"]}

  ;; ClojureScript (node) Socket REPL on port 55555:
  ;; clojure -M:repl/socket-cljs
  :repl/socket-node
  {:jvm-opts ["-Dclojure.server.repl={:port,55555,:accept,cljs.server.node/repl}"]}

  ;; ClojureScript (browser) Socket REPL on port 58585:
  ;; clojure -M:repl/socket-cljs
  :repl/socket-browser
  {:jvm-opts ["-Dclojure.server.repl={:port,58585,:accept,cljs.server.browser/repl}"]}

  ;; tubular - socket repl client
  ;; https://github.com/mfikes/tubular
  ;; Connect to a socket repl, e.g. :repl/socket
  ;; clojure -M:repl/socket-client
  :repl/socket-client
  {:extra-deps {tubular/tubular {:mvn/version "1.4.0"}}
   :main-opts  ["-m" "tubular.core"
                "-p" "55555"]}

  ;; End of Socket REPL
  ;; ---------------------------------------------------

  ,}}
